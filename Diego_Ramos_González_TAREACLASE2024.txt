-- Diego Ramos González.

-- 1. ¿ Cuántos volúmenes están disponibles para préstamos ( su estado pone: disponible ) ?

SELECT COUNT(*)
FROM volumenes
WHERE volumenes.estado LIKE lower('disponible');

-- 2. obtener los usuarios ( nombre y apellidos) que incluyan en su nombre o su apellido las letras: Ana

SELECT usuarios.nombre, usuarios.apellidos
FROM usuarios
WHERE usuarios.nombre LIKE ('%Ana%') or usuarios.apellidos LIKE ('%Ana%');

-- 3. ¿ En qué categorías aparece el libro: "Cien años de soledad" ( mostrar solo el nombre de las categorías que corresponda )?
-- categorias nombre
-- libros titulo

SELECT categorias.nombre
FROM categorias
JOIN libros_categorias ON libros_categorias.categoriaid = categorias.id
JOIN libros ON libros.id = libros_categorias.libroid
WHERE libros.titulo = "Cien años de soledad";

-- 4. Obtener los años ( sin repeticiones ) en los que se han realizado préstamos, ordenados de mayor a menor.

SELECT DISTINCT YEAR(prestamos.fechaprestamo) as Año
FROM prestamos

-- 5. Obtener las filas de la tabla: prestamos que se hayan realizado en los meses de verano: junio, julio, agosto, septiembre

SELECT *
FROM prestamos
WHERE MONTH(prestamos.fechaprestamo) IN (6, 7, 8, 9);

-- 6. Se quiere nombre y apellidos de los usuarios que tienen actualmente prestados libros. Nota: observar que no debe aparecer información repetida. Por ejemplo, si Juan Pérez tiene varios libros en préstamo, se debe evitar que aparezcan varias filas diciendo: Juan Pérez

SELECT usuarios.nombre, usuarios.apellidos
FROM usuarios
JOIN prestamos ON prestamos.usuarioid = usuarios.id
WHERE prestamos.fechadevolucion IS NULL
GROUP BY usuarios.nombre, usuarios.apellidos;

-- 7. Encontrar los títulos ( únicamente los títulos ) de todos los libros escritos por "Gabriel García Márquez" .

SELECT libros.titulo
FROM libros
JOIN autores_libros ON autores_libros.libroid = libros.id
JOIN autores on autores.id = autores_libros.autorid
WHERE autores.nombre = 'Gabriel' and autores.apellidos = 'García Márquez';


-- 8. Listar todos los usuarios ( nombre y apellidos ) a los que les han prestado libros de la categoría 'Novela'.

SELECT usuarios.nombre, usuarios.apellidos
FROM usuarios
JOIN prestamos ON prestamos.usuarioid = usuarios.id

-- 9. Obtener el id de los volumenes que no han sido devueltos ( la fecha de devolución está a null), el título del libro al que corresponde y el nombre del usuario que los tiene.

SELECT volumenes.id, libros.titulo, usuarios.nombre
FROM prestamos
JOIN volumenes ON volumenes.id = prestamos.volumenid
JOIN usuarios ON usuarios.id = prestamos.usuarioid
JOIN libros ON libros.id = volumenes.libroid
WHERE prestamos.fechadevolucion IS NULL;


-- 10. Mostrar la cantidad de préstamos por cada categoría ( no hace falta mostrar las categorías que no han tenido préstamos )

SELECT COUNT(prestamos.fechaprestamo) as cantidadPrestamos
FROM prestamos


-- 11. Obtener la media de libros por cada categoría y el nombre de la categoría( no preocuparse por si hay categorías que no tienen libros y que por ese motivo no aparezcan en los resultados )

SELECT AVG(libros.id) AS mediaCategoria, categorias.nombre 
FROM libros
JOIN libros_categorias ON libros_categorias.libroid = libros.id
JOIN categorias ON libros_categorias.categoriaid = categorias.id
GROUP BY categorias.nombre

-- 12. Encontrar los usuarios (nombre y apellidos) que han recibido más de cuatro préstamos.

SELECT usuarios.nombre, usuarios.apellidos, COUNT(prestamos.fechaprestamo) AS numeroPrestamos
FROM usuarios
JOIN prestamos ON prestamos.usuarioid = usuarios.id
GROUP by usuarios.nombre, usuarios.apellidos
HAVING numeroPrestamos > 4;

-- 13. Listar autores (nombre, apellidos) que han escrito al menos dos libros, y la cantidad de libros que han escrito

SELECT autores.nombre, autores.apellidos, COUNT(autores_libros.autorid) AS cantidad
FROM autores
JOIN autores_libros ON autores_libros.autorid = autores.id
GROUP BY autores.nombre, autores.apellidos












